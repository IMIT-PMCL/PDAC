import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import font_manager as fm
from scipy.ndimage import map_coordinates, label, center_of_mass
from scipy.spatial.distance import euclidean
from math import acos, degrees

zhfont = fm.FontProperties(fname='/Library/Fonts/Arial Unicode.ttf') 

def load_nifti(file_path):
    nifti = nib.load(file_path)
    data = nifti.get_fdata()
    return data, nifti.affine, nifti.header

def extract_coordinates(mask_data):
    coordinates = np.argwhere(mask_data)
    return coordinates

def calculate_tangent_vectors(coords):
    tangents = np.diff(coords, axis=0)
    tangents = np.vstack((tangents, tangents[-1]))  
    return tangents

def normalize(vectors):
    norms = np.linalg.norm(vectors, axis=1, keepdims=True)
    norms[norms == 0] = 1  
    return vectors / norms

def find_plane_vectors(tangent):
    if np.all(tangent[:2] == 0):  
        perp_vector = np.array([1, 0, 0])
    else:
        perp_vector = np.array([0, 0, 1])
    normal = np.cross(tangent, perp_vector)
    binormal = np.cross(tangent, normal)
    return normalize(normal.reshape(1, -1)).flatten(), normalize(binormal.reshape(1, -1)).flatten()

def generate_slice_coords(point, tangent, normal, binormal, size=256, spacing=1.0):
    half_size = size // 2
    grid_x, grid_y = np.meshgrid(np.arange(-half_size, half_size) * spacing,
                                 np.arange(-half_size, half_size) * spacing)
    grid_x = grid_x.flatten()
    grid_y = grid_y.flatten()
    
    plane_coords = (point[:, np.newaxis] + 
                    grid_x * normal[:, np.newaxis] + 
                    grid_y * binormal[:, np.newaxis])
    
    return plane_coords

def reslice_image(data, slice_coords):
    slice_2d = map_coordinates(data, [slice_coords[0], slice_coords[1], slice_coords[2]], order=1)
    return slice_2d

def find_boundary_points(region_mask, tumor_mask):
    boundary_points = []
    for x in range(1, region_mask.shape[0] - 1):
        for y in range(1, region_mask.shape[1] - 1):
            if region_mask[x, y] > 0 and tumor_mask[x, y] > 0:
                neighbors = region_mask[x-1:x+2, y-1:y+2]
                if np.any(neighbors == 0):  
                    boundary_points.append((x, y))
    return boundary_points

def calculate_wrap_angle(region_mask, tumor_mask):
    boundary_points = find_boundary_points(region_mask, tumor_mask)
    
    if len(boundary_points) < 2:
        return None  # 找不到足够的交点
    
    point_b, point_c = boundary_points[0], boundary_points[-1]
    centroid = center_of_mass(region_mask)
    
    distance_ab = euclidean(centroid, point_b)
    distance_ac = euclidean(centroid, point_c)
    distance_bc = euclidean(point_b, point_c)
    
    raw_angle_bac = degrees(acos((distance_ab**2 + distance_ac**2 - distance_bc**2) / (2 * distance_ab * distance_ac)))
    centroid_in_intersection = tumor_mask[int(centroid[0]), int(centroid[1])] > 0
    
    wrap_angle = 360 - raw_angle_bac if centroid_in_intersection else raw_angle_bac
    
    return wrap_angle

def analyze_tumor_vessel_relationship(slice_vessel, slice_tumor, min_area_threshold=10, overlap_ratio_threshold=0.5):
    if np.sum(slice_vessel) == 0:
        return [("无血管区域", None, None)]
    if np.sum(slice_tumor) == 0:
        return [("无肿瘤区域", None, None)]

    labeled_vessel, num_features = label(slice_vessel > 0)
    results = []
    
    for region in range(1, num_features + 1):
        region_mask = labeled_vessel == region
        relationship, wrap_angle = "无接触", None
        
        region_area = np.sum(region_mask)
        if region_area < min_area_threshold:
            continue  # 忽略小区域
        
        intersection = np.logical_and(region_mask, slice_tumor > 0)
        intersection_area = np.sum(intersection)
        
        if intersection_area == region_area:
            relationship = "完全包绕"
        elif intersection_area > 0:
            if intersection_area > overlap_ratio_threshold * region_area:
                relationship = "部分包绕"
                wrap_angle = calculate_wrap_angle(region_mask, slice_tumor)
            else:
                relationship = "轻微接触无包绕"
        
        results.append((region, relationship, wrap_angle))
    
    return results

def analyze_and_show_projections(blood_vessel_path, tumor_path, centerline_path, min_area_threshold=10, overlap_ratio_threshold=0.5):
    blood_vessel_data, _, _ = load_nifti(blood_vessel_path)
    tumor_data, _, _ = load_nifti(tumor_path)
    centerline_data, _, _ = load_nifti(centerline_path)

    centerline_coords = extract_coordinates(centerline_data)
    tangents = calculate_tangent_vectors(centerline_coords)
    normalized_tangents = normalize(tangents)
    
    max_wrap_angle = 0  # 初始化最大包绕角度

    for i in range(centerline_coords.shape[0]):
        cha_point = centerline_coords[i]
        tangent = normalized_tangents[i]

        normal, binormal = find_plane_vectors(tangent)
        slice_coords = generate_slice_coords(cha_point, tangent, normal, binormal)
        slice_coords = slice_coords.reshape(3, 256, 256)

        slice_2d_vessel = reslice_image(blood_vessel_data, slice_coords)
        slice_2d_tumor = reslice_image(tumor_data, slice_coords)

        relationships = analyze_tumor_vessel_relationship(slice_2d_vessel, slice_2d_tumor, min_area_threshold, overlap_ratio_threshold)

        for region, relationship, wrap_angle in relationships:
            plt.figure()
            plt.imshow(slice_2d_vessel, cmap='gray', alpha=0.7)
            plt.imshow(slice_2d_tumor, cmap='hot', alpha=0.3)
            if relationship == "部分包绕" and wrap_angle is not None:
                plt.title(f'中心线点 {i+1}, 区域 {region}: {relationship}, 包绕角度: {wrap_angle:.2f}度', fontproperties=zhfont)
                max_wrap_angle = max(max_wrap_angle, wrap_angle)  # 更新最大包绕角度
            else:
                plt.title(f'中心线点 {i+1}, 区域 {region}: {relationship}', fontproperties=zhfont)
            plt.show()

    print(f"最大包绕角度: {max_wrap_angle:.2f}度")

blood_vessel_path = '/Volumes/PIWenTeam/yajiao/To XW/722/3dAngle/mask_SMA/300451206.nii.gz'
tumor_path = '/Volumes/PIWenTeam/yajiao/To XW/722/3dAngle/mask_tumA/300451206.nii.gz'
centerline_path = '/Volumes/PIWenTeam/yajiao/To XW/722/3dAngle/SMA_centerlines/300451206.nii.gz'

analyze_and_show_projections(blood_vessel_path, tumor_path, centerline_path, overlap_ratio_threshold=0.1)
